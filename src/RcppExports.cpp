// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// beta_update
arma::vec beta_update(arma::mat x, arma::mat z, double sigma2_beta, arma::vec w, arma::vec y, arma::vec alpha);
RcppExport SEXP _CumulE1_beta_update(SEXP xSEXP, SEXP zSEXP, SEXP sigma2_betaSEXP, SEXP wSEXP, SEXP ySEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_beta(sigma2_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_update(x, z, sigma2_beta, w, y, alpha));
    return rcpp_result_gen;
END_RCPP
}
// eta_update
arma::vec eta_update(arma::vec gamma_star, arma::mat corr_inv);
RcppExport SEXP _CumulE1_eta_update(SEXP gamma_starSEXP, SEXP corr_invSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type gamma_star(gamma_starSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type corr_inv(corr_invSEXP);
    rcpp_result_gen = Rcpp::wrap(eta_update(gamma_star, corr_inv));
    return rcpp_result_gen;
END_RCPP
}
// exp_rs
double exp_rs(double a, double b);
RcppExport SEXP _CumulE1_exp_rs(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_rs(a, b));
    return rcpp_result_gen;
END_RCPP
}
// gamma_star_update
arma::vec gamma_star_update(arma::vec gamma, arma::vec eta);
RcppExport SEXP _CumulE1_gamma_star_update(SEXP gammaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_star_update(gamma, eta));
    return rcpp_result_gen;
END_RCPP
}
// gamma_update
arma::vec gamma_update(arma::vec y, arma::mat x, arma::mat z, arma::vec beta, arma::vec w, arma::vec gamma_old, arma::vec alpha, double theta, arma::vec eta);
RcppExport SEXP _CumulE1_gamma_update(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP betaSEXP, SEXP wSEXP, SEXP gamma_oldSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma_old(gamma_oldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_update(y, x, z, beta, w, gamma_old, alpha, theta, eta));
    return rcpp_result_gen;
END_RCPP
}
// half_norm_rs
double half_norm_rs(double a, double b);
RcppExport SEXP _CumulE1_half_norm_rs(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(half_norm_rs(a, b));
    return rcpp_result_gen;
END_RCPP
}
// norm_rs
double norm_rs(double a, double b);
RcppExport SEXP _CumulE1_norm_rs(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(norm_rs(a, b));
    return rcpp_result_gen;
END_RCPP
}
// phi_update
Rcpp::List phi_update(double phi, arma::vec eta, Rcpp::List temp_corr_info, double a_phi, double b_phi, double metrop_var_phi_trans, int acctot_phi_trans);
RcppExport SEXP _CumulE1_phi_update(SEXP phiSEXP, SEXP etaSEXP, SEXP temp_corr_infoSEXP, SEXP a_phiSEXP, SEXP b_phiSEXP, SEXP metrop_var_phi_transSEXP, SEXP acctot_phi_transSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type temp_corr_info(temp_corr_infoSEXP);
    Rcpp::traits::input_parameter< double >::type a_phi(a_phiSEXP);
    Rcpp::traits::input_parameter< double >::type b_phi(b_phiSEXP);
    Rcpp::traits::input_parameter< double >::type metrop_var_phi_trans(metrop_var_phi_transSEXP);
    Rcpp::traits::input_parameter< int >::type acctot_phi_trans(acctot_phi_transSEXP);
    rcpp_result_gen = Rcpp::wrap(phi_update(phi, eta, temp_corr_info, a_phi, b_phi, metrop_var_phi_trans, acctot_phi_trans));
    return rcpp_result_gen;
END_RCPP
}
// rnorm_trunc
double rnorm_trunc(double mu, double sigma, double lower, double upper);
RcppExport SEXP _CumulE1_rnorm_trunc(SEXP muSEXP, SEXP sigmaSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(rnorm_trunc(mu, sigma, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// sig2_epsilon_update
double sig2_epsilon_update(double a_sig2_e, double b_sig2_e, arma::vec y, arma::mat x, arma::mat z, arma::vec beta, arma::vec alpha);
RcppExport SEXP _CumulE1_sig2_epsilon_update(SEXP a_sig2_eSEXP, SEXP b_sig2_eSEXP, SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a_sig2_e(a_sig2_eSEXP);
    Rcpp::traits::input_parameter< double >::type b_sig2_e(b_sig2_eSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(sig2_epsilon_update(a_sig2_e, b_sig2_e, y, x, z, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// temporal_corr_fun
Rcpp::List temporal_corr_fun(int p_z, double phi);
RcppExport SEXP _CumulE1_temporal_corr_fun(SEXP p_zSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p_z(p_zSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(temporal_corr_fun(p_z, phi));
    return rcpp_result_gen;
END_RCPP
}
// theta_update
double theta_update(arma::vec y, arma::mat x, arma::mat z, arma::vec beta, arma::vec gamma, double sig2_theta, double sig2_e);
RcppExport SEXP _CumulE1_theta_update(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP sig2_thetaSEXP, SEXP sig2_eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type sig2_theta(sig2_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type sig2_e(sig2_eSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_update(y, x, z, beta, gamma, sig2_theta, sig2_e));
    return rcpp_result_gen;
END_RCPP
}
// unif_rs
double unif_rs(double a, double b);
RcppExport SEXP _CumulE1_unif_rs(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(unif_rs(a, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CumulE1_beta_update", (DL_FUNC) &_CumulE1_beta_update, 6},
    {"_CumulE1_eta_update", (DL_FUNC) &_CumulE1_eta_update, 2},
    {"_CumulE1_exp_rs", (DL_FUNC) &_CumulE1_exp_rs, 2},
    {"_CumulE1_gamma_star_update", (DL_FUNC) &_CumulE1_gamma_star_update, 2},
    {"_CumulE1_gamma_update", (DL_FUNC) &_CumulE1_gamma_update, 9},
    {"_CumulE1_half_norm_rs", (DL_FUNC) &_CumulE1_half_norm_rs, 2},
    {"_CumulE1_norm_rs", (DL_FUNC) &_CumulE1_norm_rs, 2},
    {"_CumulE1_phi_update", (DL_FUNC) &_CumulE1_phi_update, 7},
    {"_CumulE1_rnorm_trunc", (DL_FUNC) &_CumulE1_rnorm_trunc, 4},
    {"_CumulE1_sig2_epsilon_update", (DL_FUNC) &_CumulE1_sig2_epsilon_update, 7},
    {"_CumulE1_temporal_corr_fun", (DL_FUNC) &_CumulE1_temporal_corr_fun, 2},
    {"_CumulE1_theta_update", (DL_FUNC) &_CumulE1_theta_update, 7},
    {"_CumulE1_unif_rs", (DL_FUNC) &_CumulE1_unif_rs, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_CumulE1(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
